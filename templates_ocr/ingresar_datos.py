#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.6
#  in conjunction with Tcl version 8.6
#    Nov 03, 2020 07:15:53 PM EST  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import ingresar_datos_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = ventana (root)
    ingresar_datos_support.init(root, top)
    root.mainloop()

w = None
def create_ventana(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_ventana(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = ventana (w)
    ingresar_datos_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_ventana():
    global w
    w.destroy()
    w = None

class ventana:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("985x568+134+84")
        top.minsize(120, 1)
        top.maxsize(1370, 729)
        top.resizable(1,  1)
        top.title("Ocr Factura")
        top.configure(background="#d9d9d9")

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.menubar.add_command(
                label="Ingresar Datos")
        self.menubar.add_command(
                label="Realizar Consultas")

        self.contenedor = tk.Frame(top)
        self.contenedor.place(relx=0.0, rely=0.0, relheight=0.995
                , relwidth=0.996)
        self.contenedor.configure(relief='groove')
        self.contenedor.configure(borderwidth="2")
        self.contenedor.configure(relief="groove")
        self.contenedor.configure(background="#f4f4f2")

        self.btn_seleccionar = tk.Button(self.contenedor)
        self.btn_seleccionar.place(relx=0.01, rely=0.018, height=35, width=160)
        self.btn_seleccionar.configure(activebackground="#bbbfca")
        self.btn_seleccionar.configure(activeforeground="#495464")
        self.btn_seleccionar.configure(background="#495464")
        self.btn_seleccionar.configure(borderwidth="0")
        self.btn_seleccionar.configure(disabledforeground="#a3a3a3")
        self.btn_seleccionar.configure(font="-family {Segoe UI} -size 12")
        self.btn_seleccionar.configure(foreground="#e8e8e8")
        self.btn_seleccionar.configure(highlightbackground="#d9d9d9")
        self.btn_seleccionar.configure(highlightcolor="black")
        self.btn_seleccionar.configure(pady="0")
        self.btn_seleccionar.configure(text='''Seleccionar''')

        self.lb_archivo = tk.Label(self.contenedor)
        self.lb_archivo.place(relx=0.178, rely=0.018, height=35, width=298)
        self.lb_archivo.configure(background="#e8e8e8")
        self.lb_archivo.configure(disabledforeground="#a3a3a3")
        self.lb_archivo.configure(font="-family {Segoe UI} -size 10")
        self.lb_archivo.configure(foreground="#000000")
        self.lb_archivo.configure(text='''Ningun archivo''')

        self.lb_estado = tk.Label(self.contenedor)
        self.lb_estado.place(relx=0.493, rely=0.018, height=35, width=38)
        self.lb_estado.configure(background="#ff0000")
        self.lb_estado.configure(borderwidth="0")
        self.lb_estado.configure(disabledforeground="#a3a3a3")
        self.lb_estado.configure(foreground="#000000")

        self.lb_mensaje_estado = tk.Label(self.contenedor)
        self.lb_mensaje_estado.place(relx=0.545, rely=0.018, height=35
                , width=198)
        self.lb_mensaje_estado.configure(background="#f4f4f2")
        self.lb_mensaje_estado.configure(disabledforeground="#a3a3a3")
        self.lb_mensaje_estado.configure(foreground="#000000")
        self.lb_mensaje_estado.configure(text='''No se ha cargado ningun archivo''')

        self.btn_analizar = tk.Button(self.contenedor)
        self.btn_analizar.place(relx=0.797, rely=0.018, height=35, width=180)
        self.btn_analizar.configure(activebackground="#bbbfca")
        self.btn_analizar.configure(activeforeground="#495464")
        self.btn_analizar.configure(background="#495464")
        self.btn_analizar.configure(borderwidth="0")
        self.btn_analizar.configure(disabledforeground="#a3a3a3")
        self.btn_analizar.configure(font="-family {Segoe UI} -size 12")
        self.btn_analizar.configure(foreground="#e8e8e8")
        self.btn_analizar.configure(highlightbackground="#d9d9d9")
        self.btn_analizar.configure(highlightcolor="black")
        self.btn_analizar.configure(pady="0")
        self.btn_analizar.configure(text='''Analizar''')

        self.btn_guardar = tk.Button(self.contenedor)
        self.btn_guardar.place(relx=0.797, rely=0.885, height=35, width=180)
        self.btn_guardar.configure(activebackground="#bbbfca")
        self.btn_guardar.configure(activeforeground="#495464")
        self.btn_guardar.configure(background="#495464")
        self.btn_guardar.configure(borderwidth="0")
        self.btn_guardar.configure(disabledforeground="#a3a3a3")
        self.btn_guardar.configure(font="-family {Segoe UI} -size 12")
        self.btn_guardar.configure(foreground="#e8e8e8")
        self.btn_guardar.configure(highlightbackground="#d9d9d9")
        self.btn_guardar.configure(highlightcolor="black")
        self.btn_guardar.configure(pady="0")
        self.btn_guardar.configure(text='''Guardar Dato(s)''')

        self.scroll = ScrolledWindow(self.contenedor)
        self.scroll.place(relx=0.01, rely=0.106, relheight=0.772, relwidth=0.977)

        self.scroll.configure(background="white")
        self.scroll.configure(borderwidth="2")
        self.scroll.configure(highlightbackground="#d9d9d9")
        self.scroll.configure(highlightcolor="black")
        self.scroll.configure(insertbackground="black")
        self.scroll.configure(relief="groove")
        self.scroll.configure(selectbackground="blue")
        self.scroll.configure(selectforeground="white")
        self.color = self.scroll.cget("background")
        self.scroll_f = tk.Frame(self.scroll,
                            background=self.color)
        self.scroll.create_window(0, 0, anchor='nw',
                                           window=self.scroll_f)

        pos_y_entry = 0.023
        for fila in range(30):
            pos_x_entry = 0.010
            for titulos in range(12):
                self.TEntry1 = ttk.Entry(self.scroll)
                self.TEntry1.place(relx=pos_x_entry, rely=pos_y_entry, relheight=0.046
                        , relwidth=0.082)
                self.TEntry1.configure(takefocus="")
                self.TEntry1.configure(cursor="ibeam")
                pos_x_entry += 0.080
            pos_y_entry += 0.050
            

        # self.TEntry1_1 = ttk.Entry(self.scroll)
        # self.TEntry1_1.place(relx=0.085, rely=0.023, relheight=0.046
        #         , relwidth=0.083)
        # self.TEntry1_1.configure(takefocus="")
        # self.TEntry1_1.configure(cursor="ibeam")

        # self.TEntry1_2 = ttk.Entry(self.scroll)
        # self.TEntry1_2.place(relx=0.169, rely=0.023, relheight=0.046
        #         , relwidth=0.083)
        # self.TEntry1_2.configure(takefocus="")
        # self.TEntry1_2.configure(cursor="ibeam")

        # self.TEntry1_3 = ttk.Entry(self.scroll)
        # self.TEntry1_3.place(relx=0.254, rely=0.023, relheight=0.046
        #         , relwidth=0.082)
        # self.TEntry1_3.configure(takefocus="")
        # self.TEntry1_3.configure(cursor="ibeam")

        # self.TEntry1_4 = ttk.Entry(self.scroll)
        # self.TEntry1_4.place(relx=0.338, rely=0.023, relheight=0.046
        #         , relwidth=0.082)
        # self.TEntry1_4.configure(takefocus="")
        # self.TEntry1_4.configure(cursor="ibeam")

        # self.TEntry1_5 = ttk.Entry(self.scroll)
        # self.TEntry1_5.place(relx=0.423, rely=0.023, relheight=0.046
        #         , relwidth=0.082)
        # self.TEntry1_5.configure(takefocus="")
        # self.TEntry1_5.configure(cursor="ibeam")

        # self.TEntry1_6 = ttk.Entry(self.scroll)
        # self.TEntry1_6.place(relx=0.507, rely=0.023, relheight=0.046
        #         , relwidth=0.082)
        # self.TEntry1_6.configure(takefocus="")
        # self.TEntry1_6.configure(cursor="ibeam")

        # self.TEntry1_7 = ttk.Entry(self.scroll)
        # self.TEntry1_7.place(relx=0.592, rely=0.023, relheight=0.046
        #         , relwidth=0.083)
        # self.TEntry1_7.configure(takefocus="")
        # self.TEntry1_7.configure(cursor="ibeam")

        # self.TEntry1_8 = ttk.Entry(self.scroll)
        # self.TEntry1_8.place(relx=0.676, rely=0.023, relheight=0.046
        #         , relwidth=0.083)
        # self.TEntry1_8.configure(takefocus="")
        # self.TEntry1_8.configure(cursor="ibeam")

        # self.TEntry1_9 = ttk.Entry(self.scroll)
        # self.TEntry1_9.place(relx=0.761, rely=0.023, relheight=0.046
        #         , relwidth=0.082)
        # self.TEntry1_9.configure(takefocus="")
        # self.TEntry1_9.configure(cursor="ibeam")

        # self.TEntry1_10 = ttk.Entry(self.scroll)
        # self.TEntry1_10.place(relx=0.93, rely=0.023, relheight=0.046
        #         , relwidth=0.082)
        # self.TEntry1_10.configure(takefocus="")
        # self.TEntry1_10.configure(cursor="ibeam")

        # self.TEntry1_11 = ttk.Entry(self.scroll)
        # self.TEntry1_11.place(relx=0.845, rely=0.023, relheight=0.046
        #         , relwidth=0.084)
        # self.TEntry1_11.configure(takefocus="")
        # self.TEntry1_11.configure(cursor="ibeam")

        self.pb_progreso = ttk.Progressbar(self.contenedor)
        self.pb_progreso.place(relx=0.0, rely=0.956, relwidth=0.999
                , relheight=0.0, height=22)
        self.pb_progreso.configure(length="980")

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledWindow(AutoScroll, tk.Canvas):
    '''A standard Tkinter Canvas widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Canvas.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





